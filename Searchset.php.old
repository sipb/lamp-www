<?

require_once("lamp.php");

class Searchset {
	var $id;
	var $uname = "";
	var $searchstring = "";
	var $querybox = "";
	var $tracks = array();
	var $albums = array();
	var $view = 0;
	var $page = 1;
	var $nalbum_pages = 0;
	var $ntrack_pages = 0;
	var $npages;
	var $type;
	var $pagesize = 100;	
	var $albumquery = "";
	var $songquery = "";

	function Searchset($stype, $query) {
		if ($stype == "unserialize") {
			$this->unserialize($query);
			return;
		} 

		/* We need to make a new Searchset */
		$this->uname = get_username();
		db_query("insert into searchsets (val) values ('')");
		$this->id = db_insert_id();

		/* And set it up properly... */
		if ($stype == "basicsearch") {
			$this->initBasicSearch($query);
		} else if ($stype == "advancedsearch") {
			$this->initAdvancedSearch($query);
		} else if ($stype == "randomsearch") {
		        $this->initRandomSearch($query);
		} else if ($stype == "album") {
			$this->initViewAlbum($query);
		} else if ($stype == "song") {
			$this->initViewSong($query);
		}
		
	}

	function save() {
		
		db_query("update searchsets set val='".$this->serialize()."' where id=$this->id ");
	}

	function unserialize($id) {
		$ss = db_query("select val from searchsets where id=$id");
		$ss = db_fetch_array($ss);
		$ss = $ss[val];
		$this = unserialize(gzuncompress($ss));
		if (get_username() != $this->uname) {
			echo "No such searchset for $this->uname.";
			die;
		}
	}

	function serialize() {
		return addslashes(gzcompress(serialize($this)));
	}

	function initViewAlbum($aid) {
		$this->type = "album";
		$a = new Music("album", $aid);
		$this->albums[0] = $a;
		$this->searchstring = $a->title;

		$this->tracks = $a->get_tracks();
		$this->save();
	}

	function initViewSong($sid) {
//		echo "init: $sid";
		$this->type = "song";
		$s = new Music("song", $sid);
		$this->tracks[0] = $s;
		$this->searchstring = $s->title;

		$this->albums = array();
		$this->save();
	}


	function initRandomSearch($q) {
		$this->type = "both";
		$this->searchstring = stripslashes($q);
		if (strlen($this->searchstring) > 40) {
			$this->searchstring = substr($this->searchstring, 0, 37) . "...";
		}
		$this->querybox = $q;
		
		$this->albumquery = 	"select album_id from albums 
					where album_title like '%$q%' or 
					album_performer like '%$q%' or 
					album_composer like '%$q%' or 
					album_conductor like '%$q%'
					ORDER BY RAND()
					LIMIT 100";
		$aids = db_query($this->albumquery);

		$this->nalbum_pages = ceil(db_numrows($aids)/$this->pagesize);
		while ($aid = db_fetch_array($aids)) {
			$this->albums[count($this->albums)] = $aid[album_id];
		}
		$this->songquery = "select track_id from tracks 
					where track_title like '%$q%' or 
					track_performer like '%$q%' or 
					track_composer like '%$q%' or 
					track_conductor like '%$q%'
					ORDER BY RAND()
					LIMIT 100";
		$tids = db_query($this->songquery);
	
		$this->ntrack_pages = ceil(db_numrows($tids)/100);

		while ($tid = db_fetch_array($tids)) {
			$this->tracks[count($this->tracks)] = $tid[track_id];
		}
	
		$this->save();		
		log_event("SEARCH random for: $q");
	}



	function initBasicSearch($q) {
		$this->type = "both";
		$this->searchstring = stripslashes($q);
		if (strlen($this->searchstring) > 40) {
			$this->searchstring = substr($this->searchstring, 0, 37) . "...";
		}
		$this->querybox = $q;
		

		$this->albumquery = 	"select album_id from albums 
					where album_title like '%$q%' or 
					album_performer like '%$q%' or 
					album_composer like '%$q%' or 
					album_conductor like '%$q%'
					LIMIT 1000";
		$aids = db_query($this->albumquery);

		$this->nalbum_pages = ceil(db_numrows($aids)/$this->pagesize);
		while ($aid = db_fetch_array($aids)) {
			$this->albums[count($this->albums)] = $aid[album_id];
		}
		$this->songquery = "select track_id from tracks 
					where track_title like '%$q%' or 
					track_performer like '%$q%' or 
					track_composer like '%$q%' or 
					track_conductor like '%$q%'
					LIMIT 5000";
		$tids = db_query($this->songquery);
	
		$this->ntrack_pages = ceil(db_numrows($tids)/100);

		while ($tid = db_fetch_array($tids)) {
			$this->tracks[count($this->tracks)] = $tid[track_id];
		}
	
		$this->save();		
		log_event("SEARCH basic for: $q");
	}



	function initAdvancedSearch($q) {
		$this->type = "both";
		$this->querybox = implode($q," ");
		$this->searchstring = implode($q," ");
		

		$title = $q[title];
		$performer = $q[performer];
		$composer = $q[composer];
		$conductor = $q[conductor];
	
		$this->albumquery = "select album_id from albums 
					where album_title like '%$title%' and
					album_performer like '%$performer%' and 
					album_composer like '%$composer%' and
					album_conductor like '%$conductor%'
					LIMIT 1000";

		$aids = db_query($this->albumquery);

		$this->nalbum_pages = ceil(db_numrows($aids)/$this->pagesize);
		while ($aid = db_fetch_array($aids)) {
			$this->albums[count($this->albums)] = $aid[album_id];
		}

		$this->songquery = "select track_id from tracks 
					where track_title like '%$title%' and 
					track_performer like '%$performer%' and 
					track_composer like '%$composer%' and
					track_conductor like '%$conductor%'
					LIMIT 5000";
		$tids = db_query($this->songquery);

		$this->ntrack_pages = ceil(db_numrows($tids)/100);

		while ($tid = db_fetch_array($tids)) {
			$this->tracks[count($this->tracks)] = $tid[track_id];
		}
	
		$this->save();		
		log_event("SEARCH advanced for: title=$title performer=$performer composer=$composer coductor=$conductor");

	}





	function results($view, $page) {
		if ($view=="") {$view=0;}
		if ($page=="") {$page=1;}
		$this->view = $view;
		$this->page = $page;
		if ($this->type == "both") {
			$this->results_both($view, $page);
		} else if ($this->type == "album") {
			$this->results_album();
		} else if ($this->type == "song") {
			$this->results_song();
		}

	}

function results_song() {
	$s = $this->tracks[0];
	$pcount = 0;	

	?>
	<div class="results-report">
	<div class="text-announce">Play song: <?echo $this->searchstring;?></div>	
	Your song appears in several programs. Please select one to play.
	</div>

<?

	$i = 1;
	do {
		$p = new Program("from_tid", $s->music_id, $pcount++);
	// print program info
	?>
	<div class="results-box">
<div class="result-float"><a href="<?echo $p->program_link();?>">Play</a></div>
<?
	echo "Program ".$i++;
?>
<?
		$sids = $p->songs_list();
		foreach ($sids as $sid) {
			$os = new Music("song", $sid);
	//		echo $os->get_title() . " <br>";
			echo $os->result_text("album,add,$creating");	
	}
?>
	</div>
<br>
<?

	} while ($p->more_progs_exist != 0);

}

	function results_album() {
		$a = $this->albums[0];
		?>
		<div class="results-report">
		
		<div class="text-announce"> 		
 			<? 
			echo $a->title . 
" [<a href=\"".$a->program_link()."\">Play entire CD</a>]";
			?>
		</div>


		<? echo $a->result_detail(); ?>


		<div class="result-title"> Tracks on album:</div>
		<div class="results-box">
		
		<?
		foreach ($this->tracks as $t) {
			echo $t->result_text("program");
		}
		?>

		</div>
		</div>
		<?
	}

	function results_both() {


	if ($this->view == 0) {
		$this->npages = $this->nalbum_pages;
	} else {
		$this->npages = $this->ntrack_pages;
	}
/*	
	$progs = array();
	$i = 0;
	do {
		$progs[$i++] = new Program("from_tid", 2);
	} while ($progs[$i++]->more_progs_exist > 0);
*/
?>

<div class="results-report">
<div class="text-announce"> 
  You searched for: <? echo $this->searchstring;?>.
</div>

<?


if (count($this->tracks) == 0 ) {
	$this->view = 0;
}

if (count($this->albums) == 0 ) {
	$this->view = 1;
	if (count($this->tracks)==0) {
	$this->view = 2;	// no hits found
	}
}

$beginres = "
<div><span class=\"results-tab-active\">";


	if ($this->view == 0) {
	 echo 	"<span class=results-tab-active> " . 
		count($this->albums) . " albums,</span> ".
		"<span class=results-tab-inactive>" . 
		count($this->tracks) . 
		((count($this->tracks) > 0)? " <a href=\"".$this->link()."&view=1\">":"").
			" songs".
		((count($this->tracks) > 0)? "</a>":"").
		"</span>".
		" found.</div>";
		$beginres .= " albums:";
	} else if ($this->view==1){

	 echo 	"<span class=results-tab-inactive> " . 
		count($this->albums) . 
		((count($this->albums) > 0)? " <a href=\"".$this->link()."&view=0\">":"").
			" albums,".
		((count($this->albums) > 0)? "</a>":"").
		"</span> ".
		"<span class=results-tab-active>" . 
		count($this->tracks) . " songs</span>".
		" found.</div>";
		$beginres .= " songs:";

	} else {
		echo "No results found. Please try a broader search.";
		log_event("SEARCH empty: $this->albumquery ; $this->songquery");

		return;
	}


	if ($this->npages > 0) {
		$beginres .= " (p. $this->page of $this->npages)";
	if ($this->page > 1) {
		$beginres.= "
		 [<a href=".
		$this->link().
		"&page=".($this->page-1)."&view=".$this->view.		
		">prev</a>]";
	}
	if ($this->page < $this->npages) {
		$beginres .= "
		[<a href=".
		$this->link().
		"&page=".($this->page+1)."&view=".$this->view.
		">next</a>] ";
	}

	$beginres .= "</span>";
	echo $beginres;

	}

?>

</span>
</div>
<div class="results-box">

<?

if ($this->view==0) {
	for ($i = ($this->page - 1)*$this->pagesize; $i < min(($this->page * $this->pagesize), count($this->albums)); $i++)
	{
	$a = new Music("album", $this->albums[$i]);
	echo $a->result_text("album,program");
	}
} else if ($this->view == 1){
	for ($i = ($this->page - 1)*$this->pagesize; $i < min(($this->page * $this->pagesize), count($this->tracks)); $i++)
	{
	$t = new Music("track", $this->tracks[$i]);	
	echo $t->result_text("album,program");
	}
}

	echo "</div>";	
	if ($this->npages > 1) {
		echo "$beginres";
	}

?>




<?


	}

	function link() {
		return "./?searchset=".$this->uname."."."$this->id";
	}

}


?>
